-- Cria o banco de dados 'scratch' se ele não existir
CREATE DATABASE IF NOT EXISTS Scratch;

-- Seleciona o banco de dados 'scratch' para uso
USE scratch;

-- 1. Cria a tabela 'alunos' (sua info_alunos) com a estrutura inicial
-- As modificações mais detalhadas de colunas serão feitas em um ALTER TABLE único abaixo.
CREATE TABLE IF NOT EXISTS alunos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    turma VARCHAR(50), -- Será alterado para ENUM posteriormente
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    telefone VARCHAR(20),
    data_nascimento DATE,
    rg VARCHAR(20),
    cpf VARCHAR(15) UNIQUE,
    endereco VARCHAR(255),
    escolaridade VARCHAR(100), -- Será alterado para ENUM posteriormente
    escola VARCHAR(255), -- Será alterado para ENUM posteriormente
    responsavel VARCHAR(255)
);

-- Insere um aluno inicial na tabela 'alunos'
INSERT INTO alunos (turma, nome, email, telefone, data_nascimento, rg, cpf, endereco, escolaridade, escola, responsavel) VALUES
('25.1 - T1', 'Fulano de Tal', 'fulanodetal@gmail.com', '81912345678', '2010-01-01', '1234567', '12345678910', 'Rua dos Bobos - nº 0', '8º ano', 'Pública', 'Fulana de Tal')
ON DUPLICATE KEY UPDATE nome=VALUES(nome); -- Evita erro se o aluno já existir por CPF ou email

-- 2. Cria a tabela 'users'
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255),
    role ENUM('student', 'teacher', 'admin') NOT NULL, -- O 'admin' será removido posteriormente pelo ALTER TABLE
    student_id INT UNIQUE,
    last_login DATETIME,
    total_logins INT DEFAULT 0,
    online_status VARCHAR(20) DEFAULT 'Offline',
    FOREIGN KEY (student_id) REFERENCES alunos(id) ON DELETE SET NULL
);

-- Insere usuários iniciais na tabela 'users'
INSERT INTO users (username, password_hash, full_name, role, student_id, last_login, total_logins, online_status) VALUES
('programacao', 'scrypt:32768:8:1$MQN1vNMTRKLalFNe$60a78c8315739dc1198bedab10e6e7bbabad29e7c12917d748306fea4ca1f8cc721a7ae616e6ff842c792bffb3872e4949cf5759a96b6feecaba6b7c97678632', 'Fulano de Tal', 'student', 1, NULL, 0, 'Offline'),
('professor', 'scrypt:32768:8:1$t7OyXy7NDbPAqplM$a0e9a7ba25f8308f5b92e54b357a6a9db5dfe6c6bbef4f0238443c39c1e2e701dae69b710dbe1debd86eedd6bfc46e7c2c01f69c9c77fdfb8c940f05696007bc', 'Prof. Silva', 'teacher', NULL, NULL, 0, 'Offline'),
('aluno1', 'scrypt:32768:8:1$iqPpj87su8idH0ab$9aff10936e3ea266527cb24113f4e855e6d0c516c8fd7c2059eb009a9ba76a547ee3fbd9d7b95940dc934a38af5ef1efb87f299edb01d875388fbe0572e9422b', 'Maria Santos', 'student', NULL, NULL, 0, 'Offline'),
('aluno2', 'scrypt:32768:8:1$FiqaVRGNC2mcdNPd$c0ec0f5d65c535438a98e477d7e81505fe4bb98c859d25174a5938d2ff2fc9aff20e5f98ed12fa56e338ad74dc773c7587917693496b3ea1543989055bd794b9', 'João Oliveira', 'student', NULL, NULL, 0, 'Offline'),
('admin', 'scrypt:32768:8:1$GHx0BNbZKEME07Kw$369c25a2741090d77b92b933d8f11d6c527d01c1dd8ddd2bc1b34fc0797b2129b25283564ff5391e06c1ccbc148ca7258fe27ca9c1e65b213ae1e084ed6b4e00', 'Administrador', 'admin', NULL, NULL, 0, 'Offline')
ON DUPLICATE KEY UPDATE password_hash=VALUES(password_hash), full_name=VALUES(full_name), role=VALUES(role); -- Evita erro se o usuário já existir por username

-- 3. Cria a tabela 'classes'
CREATE TABLE IF NOT EXISTS classes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    status ENUM('completed', 'current', 'future', 'cancelled') NOT NULL,
    description TEXT
);

-- 4. Cria a tabela 'attendance_records'
CREATE TABLE IF NOT EXISTS attendance_records (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    class_id INT NOT NULL,
    attendance_status ENUM('P', 'F', 'Fj') NOT NULL, -- P=Presente, F=Falta, Fj=Falta Justificada
    recorded_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (student_id, class_id), -- Garante um registro por aluno por aula
    FOREIGN KEY (student_id) REFERENCES alunos(id) ON DELETE CASCADE,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE
);

-- 5. Cria a tabela 'materials'
CREATE TABLE IF NOT EXISTS materials (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    file_type VARCHAR(100), -- Ex: 'application/pdf'
    file_size BIGINT, -- Tamanho em bytes
    upload_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    description TEXT,
    file_path VARCHAR(255) -- Caminho ou identificador do arquivo armazenado
);

-- 7. Consolida todas as modificações da tabela 'alunos' em um único ALTER TABLE
-- Isso garante as restrições de VARCHAR, UNIQUE, NOT NULL e ENUM
ALTER TABLE alunos
MODIFY COLUMN turma ENUM('25.1 - T1', '25.1 - T2', '25.2 - T1') NOT NULL,
MODIFY COLUMN nome VARCHAR(70) NOT NULL,
MODIFY COLUMN email VARCHAR(50) UNIQUE,
MODIFY COLUMN telefone VARCHAR(11) UNIQUE,
MODIFY COLUMN rg VARCHAR(9) UNIQUE,
MODIFY COLUMN cpf VARCHAR(11) UNIQUE NOT NULL,
MODIFY COLUMN endereco VARCHAR(100),
MODIFY COLUMN escolaridade ENUM('8º ano', '9º ano') NOT NULL,
MODIFY COLUMN escola ENUM('Pública', 'Privada') NOT NULL,
MODIFY COLUMN responsavel VARCHAR(70) NOT NULL;

-- 8. Cria a tabela 'status_alunos' (agora uma tabela separada para status por aluno)
CREATE TABLE IF NOT EXISTS status_alunos (
    id INT PRIMARY KEY, -- Chave Primária e Estrangeira
    faltas SMALLINT DEFAULT 0,
    situacao ENUM('Ativo', 'Desistente') DEFAULT 'Ativo',
    FOREIGN KEY (id) REFERENCES alunos(id) ON DELETE CASCADE
);

-- 9. Cria a tabela 'atividades_alunos'
CREATE TABLE IF NOT EXISTS atividades_alunos (
    id INT PRIMARY KEY, -- Chave Primária e Estrangeira
    aula_1 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_2 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_3 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_4 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_5 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_6 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_7 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_8 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_9 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    aula_10 ENUM('Pendente', 'Enviada', 'Verificada') DEFAULT 'Pendente',
    total_enviadas SMALLINT DEFAULT 0,
    FOREIGN KEY (id) REFERENCES alunos(id) ON DELETE CASCADE
);

ALTER TABLE users MODIFY COLUMN role ENUM('student', 'teacher') NOT NULL;

select * from alunos;